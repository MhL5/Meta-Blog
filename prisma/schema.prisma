generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ArticleComment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  articleId String  @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("articlecomments")
}

model Articlelike {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  articleId String  @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@map("articlelikes")
}

model FavoriteArticle {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  articleId String  @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@map("favoriteArticles")
}

model ArticleView {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  ip        String  @unique
  articleId String  @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])

  createdAt DateTime @default(now())

  @@map("articleViews")
}

model Article {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  avatar          String
  content         String
  summary         String
  title           String
  readingTime     Int
  tags            String[]
  articleComments ArticleComment[]
  articlelikes    Articlelike[]
  favoriteArticle FavoriteArticle[]
  articleViews    ArticleView[]
  authorId        String            @db.ObjectId
  author          User              @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("articles")
}

model NewsletterSubscriber {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique

  @@map("newsletterSubscribers")
}

// ⚠️⚠️ Next-auth models - BECAREFUL WHILE MODIFING ⚠️⚠️
// --------------------------------------------------------------------------
model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  accounts         Account[]
  sessions         Session[]
  Articles         Article[]
  ArticleComments  ArticleComment[]
  Articlelikes     Articlelike[]
  FavoriteArticles FavoriteArticle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}
